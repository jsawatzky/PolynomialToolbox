package softwaredesign973.gui;

import softwaredesign973.polynomial.Polynomial;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Created by Jacob on 2015-11-10.
 */
public class MainGUI {

    private PolynomialInput polynomialInput;
    private JPanel contentPane;
    private JButton addPolynomial;
    private JTextArea info;
    private JScrollPane listPane;
    private JPanel graph;
    private JPanel operations;
    private JButton deletePolynomial;
    private JPanel list;
    private Graph graph1;

    private HashMap<JCheckBox, Function> functions = new HashMap<>();

    public MainGUI() {
        $$$setupUI$$$();
        addPolynomial.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Function f = polynomialInput.getFuntion();
                JCheckBox checkBox = new JCheckBox(f.toString(), new Icon() {
                    @Override
                    public void paintIcon(Component c, Graphics g, int x, int y) {
                        g.setColor(f.getColor());
                        g.drawRect(x, y, getIconWidth(), getIconHeight());
                    }

                    @Override
                    public int getIconWidth() {
                        return 10;
                    }

                    @Override
                    public int getIconHeight() {
                        return 10;
                    }
                }, true);
                checkBox.setSelectedIcon(new Icon() {
                    @Override
                    public void paintIcon(Component c, Graphics g, int x, int y) {
                        g.setColor(f.getColor());
                        g.fillRect(x, y, getIconWidth(), getIconHeight());
                    }

                    @Override
                    public int getIconWidth() {
                        return 10;
                    }

                    @Override
                    public int getIconHeight() {
                        return 10;
                    }
                });
                checkBox.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (((JCheckBox) e.getSource()).isSelected()) {
                            deletePolynomial.setEnabled(true);
                        } else if (getSelectedFunctions().size() == 0) {
                            deletePolynomial.setEnabled(false);
                        }
                        graph1.setFunctions(getSelectedFunctions());
                        graph1.update();
                        contentPane.revalidate();
                    }
                });

                functions.put(checkBox, f);
                list.add(checkBox);

                graph1.setFunctions(getSelectedFunctions());
                graph1.update();

                deletePolynomial.setEnabled(true);

                polynomialInput.reset();

                contentPane.revalidate();

            }
        });
        deletePolynomial.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                for (JCheckBox checkBox : getSelectedCheckBoxes()) {

                    functions.remove(checkBox);
                    list.remove(checkBox);

                    graph1.setFunctions(getSelectedFunctions());
                    graph1.update();

                }

                contentPane.revalidate();

            }
        });
    }

    public ArrayList<Function> getSelectedFunctions() {

        ArrayList<Function> selected = new ArrayList<>();

        for (JCheckBox checkBox : functions.keySet()) {

            if (checkBox.isSelected()) {

                selected.add(functions.get(checkBox));

            }

        }

        return selected;

    }

    public ArrayList<JCheckBox> getSelectedCheckBoxes() {

        ArrayList<JCheckBox> selected = new ArrayList<>();

        for (JCheckBox checkBox : functions.keySet()) {

            if (checkBox.isSelected()) {

                selected.add(checkBox);

            }

        }

        return selected;

    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("MainGUI");
        frame.setContentPane(new MainGUI().contentPane);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        frame.setSize((int) (screenSize.width * 0.8), (int) (screenSize.height * 0.8));
        frame.setLocationRelativeTo(null);
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        polynomialInput = new PolynomialInput();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 5;
        gbc.weightx = 1.0;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(polynomialInput, gbc);
        final JLabel label1 = new JLabel();
        label1.setFont(new Font(label1.getFont().getName(), label1.getFont().getStyle(), 18));
        label1.setText("Polynomial Toolbox");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.1;
        gbc.weighty = 0.1;
        gbc.anchor = GridBagConstraints.WEST;
        contentPane.add(label1, gbc);
        listPane = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 3;
        gbc.gridheight = 2;
        gbc.weightx = 0.3;
        gbc.weighty = 0.58;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(listPane, gbc);
        list = new JPanel();
        list.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        listPane.setViewportView(list);
        addPolynomial = new JButton();
        addPolynomial.setText("Add");
        gbc = new GridBagConstraints();
        gbc.gridx = 6;
        gbc.gridy = 0;
        gbc.weightx = 0.1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPane.add(addPolynomial, gbc);
        graph = new JPanel();
        graph.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.gridwidth = 4;
        gbc.weightx = 0.7;
        gbc.weighty = 0.5;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(graph, gbc);
        graph1 = new Graph();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        graph.add(graph1, gbc);
        info = new JTextArea();
        info.setEditable(false);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.gridwidth = 7;
        gbc.weightx = 1.0;
        gbc.weighty = 0.3;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(info, gbc);
        operations = new JPanel();
        operations.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.gridwidth = 4;
        gbc.gridheight = 2;
        gbc.weighty = 0.1;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(operations, gbc);
        deletePolynomial = new JButton();
        deletePolynomial.setEnabled(false);
        deletePolynomial.setText("Delete Selected");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 3;
        gbc.weighty = 0.02;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        contentPane.add(deletePolynomial, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
